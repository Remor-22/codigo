Pregunta 1: Subcadena Palíndroma Más Larga

def longest_palindrome(s: str) -> str:
    def expand(l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1:r]
    
    res = ""
    for i in range(len(s)):
        odd = expand(i, i)
        even = expand(i, i+1)
        res = max(res, odd, even, key=len)
    return res
/////////////////////////////////////////
Pregunta 2: Suma de Pares Únicos

def two_sum(nums, target):
    seen = set()
    for num in nums:
        complement = target - num
        if complement in seen:
            return True
        seen.add(num)
    return False
//////////////////////////////////////
Pregunta 3: Matriz Espiral

def spiral_order(matrix):
    if not matrix:
        return []
    res = []
    top, bottom = 0, len(matrix)-1
    left, right = 0, len(matrix[0])-1
    while True:
        for j in range(left, right+1):
            res.append(matrix[top][j])
        top += 1
        if top > bottom: break
        
        for i in range(top, bottom+1):
            res.append(matrix[i][right])
        right -= 1
        if left > right: break
        
        for j in range(right, left-1, -1):
            res.append(matrix[bottom][j])
        bottom -= 1
        if top > bottom: break
        
        for i in range(bottom, top-1, -1):
            res.append(matrix[i][left])
        left += 1
        if left > right: break
        
    return res
/////////////////////////////////////
Pregunta 4: Intervalos No Superpuestos

def erase_overlap_intervals(intervals):
    if not intervals:
        return 0
    intervals.sort(key=lambda x: x[1])
    count = 0
    end = float('-inf')
    for interval in intervals:
        if interval[0] >= end:
            end = interval[1]
            count += 1
    return len(intervals) - count
////////////////////////////////////
Pregunta 5: Longitud de Subcadena Sin Repeticiones

def length_of_longest_substring(s: str) -> int:
    chars = set()
    left = res = 0
    for right in range(len(s)):
        while s[right] in chars:
            chars.remove(s[left])
            left += 1
        chars.add(s[right])
        res = max(res, right - left + 1)
    return res
///////////////////////////////////
Pregunta 6: Número de Islas

def num_islands(grid):
    def dfs(i, j):
        if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != 1:
            return
        grid[i][j] = 0
        dfs(i+1, j)
        dfs(i-1, j)
        dfs(i, j+1)
        dfs(i, j-1)
    
    count = 0
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == 1:
                dfs(i, j)
                count += 1
    return count
///////////////////////////////////
Pregunta 7: Número Feliz

def is_happy(n: int) -> bool:
    seen = set()
    while n != 1:
        n = sum(int(d)**2 for d in str(n))
        if n in seen:
            return False
        seen.add(n)
    return True
/////////////////////////////////
Pregunta 8: Número Armstrong

def is_armstrong(num: int) -> bool:
    digits = str(num)
    n = len(digits)
    return sum(int(d)**n for d in digits) == num
/////////////////////////////////
Pregunta 9: Palíndromo Numérico

def is_palindrome(x: int) -> bool:
    return str(x) == str(x)[::-1]
////////////////////////////////
Pregunta 10: Factorial de Número Grande

def big_factorial(n: int) -> str:
    res = [1]
    for i in range(2, n+1):
        carry = 0
        for j in range(len(res)):
            prod = res[j] * i + carry
            res[j] = prod % 10
            carry = prod // 10
        while carry:
            res.append(carry % 10)
            carry //= 10
    return ''.join(map(str, res[::-1]))
///////////////////////////////////